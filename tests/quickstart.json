{
  "description": "This tests the 'building a smart contract' portion of the developer quickstart . It does not test forc-wallet or the contract deployment.",
  "start_url": "guides/quickstart/building-a-smart-contract/",
  "project_folder": "fuel-project",
  "needs_wallet": true,
  "steps": [
    {
      "action": "runCommand",
      "inputs": ["set-default-fuelup-toolchain"]
    },
    {
      "action": "runCommand",
      "inputs": ["create-project-folder", "cd guides-testing && "]
    },
    {
      "action": "runCommand",
      "inputs": ["create-contract", "cd guides-testing && "]
    },
    {
      "action": "runCommand",
      "inputs": ["contract-tree", "cd guides-testing/fuel-project && "]
    },
    {
      "action": "writeToFile",
      "inputs": [
        "program-type",
        "guides-testing/fuel-project/counter-contract/src/main.sw"
      ]
    },
    {
      "action": "modifyFile",
      "inputs": [
        "storage",
        "guides-testing/fuel-project/counter-contract/src/main.sw"
      ]
    },
    {
      "action": "modifyFile",
      "inputs": [
        "abi",
        "guides-testing/fuel-project/counter-contract/src/main.sw"
      ]
    },
    {
      "action": "modifyFile",
      "inputs": [
        "impl",
        "guides-testing/fuel-project/counter-contract/src/main.sw"
      ]
    },
    {
      "action": "compareToFile",
      "inputs": [
        "entire-contract",
        "guides-testing/fuel-project/counter-contract/src/main.sw"
      ]
    },
    {
      "action": "runCommand",
      "inputs": [
        "build-contract",
        "cd guides-testing/fuel-project/counter-contract && "
      ]
    },
    {
      "action": "runCommand",
      "inputs": [
        "built-contract-tree",
        "cd guides-testing/fuel-project/counter-contract && "
      ]
    },
    {
      "action": "runCommand",
      "inputs": [
        "cargo-generate-test",
        "cd guides-testing/fuel-project/counter-contract && "
      ]
    },
    {
      "action": "runCommand",
      "inputs": [
        "cargo-test-tree",
        "cd guides-testing/fuel-project/counter-contract && "
      ]
    },
    {
      "action": "modifyFile",
      "inputs": [
        "test-harness",
        "guides-testing/fuel-project/counter-contract/tests/harness.rs",
        37,
        [37, 38, 39, 40, 41, 42]
      ]
    },
    {
      "action": "compareFiles",
      "inputs": [
        "guides-testing/fuel-project/counter-contract/tests/harness.rs",
        "docs/guides/examples/quickstart/counter-contract/tests/harness.rs"
      ]
    },
    {
      "action": "goToUrl",
      "inputs": ["guides/quickstart/building-a-frontend/"]
    },
    {
      "action": "runCommand",
      "inputs": ["create-react-app", "cd guides-testing/fuel-project && "]
    },
    {
      "action": "runCommand",
      "inputs": ["install-deps", "cd guides-testing/fuel-project && "]
    },
    {
      "action": "modifyFile",
      "inputs": [
        "config-types",
        "guides-testing/fuel-project/frontend/tsconfig.json",
        3
      ]
    },
    {
      "action": "runCommand",
      "inputs": ["typegen", "cd guides-testing/fuel-project/frontend && "]
    },
    {
      "action": "writeToFile",
      "inputs": ["app-code", "guides-testing/fuel-project/frontend/src/App.tsx"]
    },
    {
      "action": "runCommand",
      "inputs": [
        "start-app",
        "pnpm pm2 start 'PORT=4000 BROWSER=none <COMMAND>' --name 'react-dapp' --cwd ./guides-testing/fuel-project/frontend"
      ]
    },
    {
      "action": "wait",
      "inputs": [7000]
    },
    {
      "action": "goToUrl",
      "inputs": ["http://127.0.0.1:4000"]
    },
    {
      "action": "clickByRole",
      "inputs": ["button", "Connect"]
    },
    {
      "action": "walletApproveConnect",
      "inputs": []
    },
    {
      "action": "wait",
      "inputs": [3000]
    },
    {
      "action": "getByLocator-save",
      "inputs": ["#count"]
    },
    {
      "action": "clickByRole",
      "inputs": ["button", "Increment"]
    },
    {
      "action": "walletApprove",
      "inputs": []
    },
    {
      "action": "wait",
      "inputs": [10000]
    },
    {
      "action": "reload",
      "inputs": []
    },
    {
      "action": "wait",
      "inputs": [5000]
    },
    {
      "action": "getByLocator-save",
      "inputs": ["#count"]
    },
    {
      "action": "checkIfIsIncremented",
      "inputs": [0, 1]
    }
  ]
}
